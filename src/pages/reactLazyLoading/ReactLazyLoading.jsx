import React, { lazy, Suspense } from "react";
import { Box, Typography } from "@mui/material";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { oneDark } from "react-syntax-highlighter/dist/esm/styles/prism";

// üîπ A LazyComponent csak akkor t√∂lt≈ëdik be, amikor sz√ºks√©ges!
const LazyComponent = lazy(() => import("./HeavyComponent"));


export function ReactLazyLoading() {
    return (
      <Box sx={{p:3}}>
        <Typography variant="h5">React Lazy Loading √©s Suspense P√©lda</Typography>
        <Typography>Viszonylag egyszer≈± a logik√°ja. Ha van olyan komponens amit sok√°ig tart bet√∂lteni akkor a Lazy loading technik√°val egyr√©szt csak akkor t√∂ltj√ºk be amikor arra val√≥ban sz√ºks√©g van, m√°sr√©szt am√≠g nem t√∂lt be addig loading anim√°ci√≥t is mutathatunk.</Typography>
        
        {/* üîπ Suspense biztos√≠tja a fallback tartalmat bet√∂lt√©s k√∂zben */}
        <Suspense fallback={<p>Loading...</p>}>
          <LazyComponent />
        </Suspense>

        <SyntaxHighlighter language="javascript" style={oneDark}>
            {code}
        </SyntaxHighlighter>
      </Box>
    );
  }


  const code = 
  `import React, { lazy, Suspense } from "react";
import { Box, Typography } from "@mui/material";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { oneDark } from "react-syntax-highlighter/dist/esm/styles/prism";

// üîπ A LazyComponent csak akkor t√∂lt≈ëdik be, amikor sz√ºks√©ges!
const LazyComponent = lazy(() => import("./HeavyComponent"));


export function ReactLazyLoading() {
    return (
      <Box sx={{p:3}}>
        
        {/* üîπ Suspense biztos√≠tja a fallback tartalmat bet√∂lt√©s k√∂zben */}
        <Suspense fallback={<p>Loading...</p>}>
          <LazyComponent />
        </Suspense>

      </Box>
    );
  }`